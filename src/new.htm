no  buddy, this is the code
import React, { useEffect, useState } from 'react';
import { format, parse } from 'date-fns';

interface Customer {
  id: number;
  name: string;
  dob: string; // Date of Birth in YYYY-MM-DD format
}

interface Event {
  name: string;
  date: string; // Date in MM-DD format
}

const events: Event[] = [
  { name: 'New Year’s Day', date: '01-01' },
  { name: 'International Day of Education', date: '01-24' },
  { name: 'Eid el-Fitr', date: '03-31' },
  { name: 'Mothering Sunday', date: '03-30' },
  { name: 'Good Friday', date: '04-01' },
  { name: 'Easter Monday', date: '04-02' },
  { name: 'Global Action Week for Education', date: '04-Last week' },
  { name: 'Education for Sustainable Development (ESD) Day', date: '04-22' },
  { name: 'Labour Day', date: '05-01' },
  { name: 'International Children’s Day', date: '06-01' },
  { name: 'Democracy Day', date: '06-12' },
  { name: 'International Youth Day', date: '08-12' },
  { name: 'World Teachers\' Day', date: '10-05' },
  { name: 'Independence Day', date: '10-01' },
  { name: 'International Literacy Day', date: '09-08' },
  { name: 'Christmas Day', date: '12-25' },
  { name: 'Boxing Day', date: '12-26' },
];

const customers: Customer[] = [
  { id: 1, name: 'John Doe', dob: '1990-06-26' },
  { id: 2, name: 'Jane Smith', dob: '1985-07-01' },
  { id: 3, name: "Elite Nursery and Primary School (Mrs Okafor Mercy)", dob: '1971-07-04' },
  { id: 4, name: "Orbit Montessori School (Mrs Amaka Okorie)", dob: '1972-02-14' },
  { id: 5, name: 'Prayota Academy (Michael Igben)', dob: '1968-07-25' },
  { id: 6, name: "Joe Hybrid Int'l Academy (Dr Emejuobi Joseph Ikechukwu)", dob: '1974-04-20' },
  { id: 7, name: "Geomarvel Int'l School (Mrs Abaroaha Georgina)", dob: '1972-06-18' },
  { id: 8, name: "Dazzleville Int'l School (Justina Oritsemisan Omokwe)", dob: '1976-09-19' },
  { id: 9, name: "Shekinah Glory Academy (Amaefule Chinyeaka Gertrude)", dob: '1980-06-25' },
  { id: 10, name: "Dayton Model School (Emanso Udongwo)", dob: '1968-09-15' },
  { id: 11, name: "Crownec Int'l School (Okorome Chinedu)", dob: '1976-06-17' },
  { id: 12, name: "Glory Innovative Academy (Ohioma Gloria)", dob: '1969-09-26' },
  { id: 13, name: "Merecer Int'l Academy (Mr Temple E. Odoko)", dob: '1973-01-15' },
];

const EventList: React.FC = () => {
  const [todayBirthdays, setTodayBirthdays] = useState<Customer[]>([]);
  const [todayEvents, setTodayEvents] = useState<Event[]>([]);
  const [upcomingBirthdays, setUpcomingBirthdays] = useState<Customer[]>([]);
  const [upcomingEvents, setUpcomingEvents] = useState<Event[]>([]);

  const today = new Date();
  const todayStr = format(today, 'MM-dd');
  const currentYear = today.getFullYear();

  // Sorting events by date
  const sortedEvents = events.sort((a, b) => {
    return parse(a.date, 'MM-dd', new Date(currentYear, 0, 1)).getTime() - parse(b.date, 'MM-dd', new Date(currentYear, 0, 1)).getTime();
  });

  // Categorizing customers and events by month
  useEffect(() => {
    const todayBD = customers.filter((customer) => {
      const dobThisYear = new Date(currentYear, new Date(customer.dob).getMonth(), new Date(customer.dob).getDate());
      return format(dobThisYear, 'MM-dd') === todayStr;
    });
    setTodayBirthdays(todayBD);

    const todayEvs = events.filter((event) => event.date === todayStr);
    setTodayEvents(todayEvs);

    // Upcoming Birthdays
    const upcomingBD = customers.filter((customer) => {
      const dobThisYear = new Date(currentYear, new Date(customer.dob).getMonth(), new Date(customer.dob).getDate());
      return dobThisYear > today;
    });
    setUpcomingBirthdays(upcomingBD);

    // Upcoming Events
    const upcomingEv = events.filter((event) => {
      const eventDate = parse(event.date, 'MM-dd', today);
      return eventDate > today;
    });
    setUpcomingEvents(upcomingEv);
  }, [todayStr, currentYear]);

  return (
    <div className="events-container">
      {/* Today's Events Section */}
      <section className="today-events">
        <h2>Today's Events & Birthdays</h2>
        <div className="events-today">
          <div className="today-birthdays">
            <h3>Today's Birthdays</h3>
            {todayBirthdays.length > 0 ? (
              todayBirthdays.map((customer) => (
                <p key={customer.id}>{customer.name} - {format(new Date(customer.dob), 'MMMM dd')}</p>
              ))
            ) : (
              <p>No birthdays today</p>
            )}
          </div>
          <div className="today-events-list">
            <h3>Today's Events</h3>
            {todayEvents.length > 0 ? (
              todayEvents.map((event, eventIndex) => (
                <p key={eventIndex}>{event.name} - {event.date}</p>
              ))
            ) : (
              <p>No events today</p>
            )}
          </div>
        </div>
      </section>

      {/* Upcoming Events & Birthdays */}
      <section className="upcoming-section">
        <h2>Upcoming Events & Birthdays</h2>
        <div className="upcoming-cards">
          <div className="upcoming-birthdays">
            <h3>Upcoming Birthdays</h3>
            {upcomingBirthdays.length > 0 ? (
              upcomingBirthdays.map((customer) => (
                <div className="card" key={customer.id}>
                  <p>{customer.name} - {format(new Date(customer.dob), 'MMMM dd')}</p>
                </div>
              ))
            ) : (
              <p>No upcoming birthdays</p>
            )}
          </div>

          <div className="upcoming-events">
            <h3>Upcoming Events</h3>
            {upcomingEvents.length > 0 ? (
              upcomingEvents.map((event, eventIndex) => (
                <div className="card" key={eventIndex}>
                  <p>{event.name} - {event.date}</p>
                </div>
              ))
            ) : (
              <p>No upcoming events</p>
            )}
          </div>
        </div>
      </section>

      {/* Past Events */}
      <section className="past-events">
        <h2>Past Events</h2>
        <div className="past-events-list">
          {sortedEvents.map((event, index) => {
            const eventDate = parse(event.date, 'MM-dd', today);
            if (eventDate < today) {
              return (
                <div key={index} className="card">
                  <p>{event.name} - {event.date}</p>
                </div>
              );
            }
            return null;
          })}
        </div>
      </section>
    </div>
  );
};

export default EventList;
Please pay attention to details  add  transition onscroll effects to eacher container. the first container wrapping the Today's birthdays and event is not aligned center.  i want to have a button there that says 'see events". when  a user clicks, then  you show todays birthday and events

remove the ids containing john and jane smith
Please pay attention to details. you did not add the transition onscroll effect. the first container wrapping the Today's birthdays and event is not aligned center. and i said earlier that i want to have a button there that says 'see events". when  a user clicks, then  you show todays birthday and events